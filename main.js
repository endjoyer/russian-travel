(()=>{"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==e(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===e(i)?i:String(i)),o)}var i}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===n(i)?i:String(i)),o)}var i}function o(){return o="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=i(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},o.apply(this,arguments)}function i(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function u(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var a=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(f,e);var t,n,i,a,s=(i=f,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(i);if(a){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return u(this,e)});function f(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),(t=s.call(this,e))._pictureFull=t._popup.querySelector(".popup-look-img__image"),t._titlePicture=t._popup.querySelector(".popup-look-img__title"),t}return t=f,(n=[{key:"open",value:function(e,t){this._pictureFull.src=t,this._pictureFull.alt=e,this._titlePicture.textContent=e,o(l(f.prototype),"open",this).call(this)}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),f}(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this),this._handleTargetClose=this._handleTargetClose.bind(this)}var n,r;return n=e,(r=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("click",this._handleTargetClose),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("click",this._handleTargetClose),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){return e.close()}))}},{key:"_handleTargetClose",value:function(e){e.target.classList.contains("popup")&&this.close()}},{key:"_handleEscClose",value:function(e){"Escape"===e.code&&this.close()}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}());function s(){this.init=function(e,t){this.attribute=e,this.lng=t},this.process=function(){_self=this;var e=new XMLHttpRequest;e.open("GET","lng/"+this.lng+".json",!1),e.onreadystatechange=function(){if(4===e.readyState&&(200===e.status||0==e.status))for(var t=JSON.parse(e.responseText),n=document.getElementsByTagName("*"),r=0;r<n.length;r++){var o=n[r],i=o.getAttribute(_self.attribute);null!=i&&(o.innerHTML=t[i])}},e.send()}}function f(e,t){var n=new s;n.init(t,e),n.process(),"en"==e&&($("#enTranslator").css("color","#f4623a"),$("#ruTranslator").css("color","#212529")),"ru"==e&&($("#ruTranslator").css("color","#f4623a"),$("#enTranslator").css("color","#212529"))}$(document).ready((function(){$("#enTranslator").click((function(){f("en","lng-tag")})),$("#ruTranslator").click((function(){f("ru","lng-tag")}))}));var p,y=document.querySelector(".popup"),v=Array.from(document.querySelectorAll(".place__image")),d=Array.from(document.querySelectorAll(".gallery__image")),h=-1,b=new a(y);b.setEventListeners();for(var m=function(){var e=_[g];e.addEventListener("click",(function(t){t.preventDefault(),h=v.indexOf(e);var n=(p=v[h].cloneNode()).src,r=p.alt;b.open(r,n)}))},g=0,_=v;g<_.length;g++)m();for(var w=function(){var e=E[S];e.addEventListener("click",(function(t){t.preventDefault(),h=d.indexOf(e);var n=(p=d[h].cloneNode()).src,r=p.alt;b.open(r,n)}))},S=0,E=d;S<E.length;S++)w()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,